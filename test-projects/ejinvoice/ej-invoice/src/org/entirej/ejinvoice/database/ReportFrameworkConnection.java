package org.entirej.ejinvoice.database;import java.sql.Connection;import java.sql.SQLException;import java.util.concurrent.atomic.AtomicBoolean;import org.entirej.framework.report.EJReportFrameworkManager;import org.entirej.framework.report.EJReportRuntimeException;import org.entirej.framework.report.interfaces.EJReportFrameworkConnection;public class ReportFrameworkConnection implements EJReportFrameworkConnection{    private Connection _connection;    private ReportConnectionFactory _factory;    private EJReportFrameworkManager _fwkManager;        private AtomicBoolean init = new AtomicBoolean(false);         public ReportFrameworkConnection(EJReportFrameworkManager fwkManager, ReportConnectionFactory factory)    {        _factory = factory;        _fwkManager = fwkManager;    }            Connection getInternalConnection()    {        if(!init.get()){            _connection = _factory.getConnection(_fwkManager);            init.set(true);        }        return _connection;    }     @Override    public void close()    {        try        {            if(init.get())                _connection.close();        }        catch (SQLException e)        {            throw new EJReportRuntimeException(e);        }    }     @Override    public void commit()    {        try        {            if(init.get())                _connection.commit();        }        catch (SQLException e)        {            throw new EJReportRuntimeException(e);        }    }     @Override    public Object getConnectionObject()    {        return getInternalConnection();    }     @Override    public void rollback()    {        try        {            if(init.get())                _connection.rollback();        }        catch (SQLException e)        {            throw new EJReportRuntimeException(e);        }    }}