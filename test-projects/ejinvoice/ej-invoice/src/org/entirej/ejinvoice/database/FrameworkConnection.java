package org.entirej.ejinvoice.database;import java.sql.Connection;import java.sql.SQLException;import java.util.concurrent.atomic.AtomicBoolean;import org.entirej.framework.core.EJApplicationException;import org.entirej.framework.core.interfaces.EJFrameworkConnection;public class FrameworkConnection implements EJFrameworkConnection{    private Connection _connection;    private ConnectionFactory _factory;        private AtomicBoolean init = new AtomicBoolean(false);         public FrameworkConnection(ConnectionFactory factory)    {        _factory = factory;    }            Connection getInternalConnection()    {        if(!init.get()){            _connection = _factory.createConnection();            init.set(true);        }        return _connection;    }     @Override    public void close()    {        try        {            if(init.get())                _connection.close();        }        catch (SQLException e)        {            throw new EJApplicationException(e);        }    }     @Override    public void commit()    {        try        {            if(init.get())                _connection.commit();        }        catch (SQLException e)        {            throw new EJApplicationException(e);        }    }     @Override    public Object getConnectionObject()    {        return getInternalConnection();    }     @Override    public void rollback()    {        try        {            if(init.get())                _connection.rollback();        }        catch (SQLException e)        {            throw new EJApplicationException(e);        }    }}